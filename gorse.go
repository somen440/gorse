package gorse

import (
	"fmt"
	"strings"
)

var zenkakuReplacer = strings.NewReplacer(
	// 半角カタカナの濁点は別文字としてカウントされるため先に replace されるよう定義が必要
	"ｶﾞ", "ガ", "ｷﾞ", "ギ", "ｸﾞ", "グ", "ｹﾞ", "ゲ", "ｺﾞ", "ゴ",
	"ｻﾞ", "ザ", "ｼﾞ", "ジ", "ｽﾞ", "ズ", "ｾﾞ", "ゼ", "ｿﾞ", "ゾ",
	"ﾀﾞ", "ダ", "ﾁﾞ", "ヂ", "ﾂﾞ", "ヅ", "ﾃﾞ", "デ", "ﾄﾞ", "ド",
	"ﾊﾞ", "バ", "ﾋﾞ", "ビ", "ﾌﾞ", "ブ", "ﾍﾞ", "ベ", "ﾎﾞ", "ボ",
	"ﾊﾟ", "パ", "ﾋﾟ", "ピ", "ﾌﾟ", "プ", "ﾍﾟ", "ペ", "ﾎﾟ", "ポ",

	"ｳﾞ", "ヴ",

	"ｱ", "ア", "ｲ", "イ", "ｳ", "ウ", "ｴ", "エ", "ｵ", "オ",
	"ｶ", "カ", "ｷ", "キ", "ｸ", "ク", "ｹ", "ケ", "ｺ", "コ",
	"ｻ", "サ", "ｼ", "シ", "ｽ", "ス", "ｾ", "セ", "ｿ", "ソ",
	"ﾀ", "タ", "ﾁ", "チ", "ﾂ", "ツ", "ﾃ", "テ", "ﾄ", "ト",
	"ﾅ", "ナ", "ﾆ", "ニ", "ﾇ", "ヌ", "ﾈ", "ネ", "ﾉ", "ノ",
	"ﾊ", "ハ", "ﾋ", "ヒ", "ﾌ", "フ", "ﾍ", "ヘ", "ﾎ", "ホ",
	"ﾏ", "マ", "ﾐ", "ミ", "ﾑ", "ム", "ﾒ", "メ", "ﾓ", "モ",
	"ﾔ", "ヤ", "ﾕ", "ユ", "ﾖ", "ヨ",
	"ﾗ", "ラ", "ﾘ", "リ", "ﾙ", "ル", "ﾚ", "レ", "ﾛ", "ロ",
	"ﾜ", "ワ", "ｦ", "ヲ",
	"ﾝ", "ン",

	"ｧ", "ァ", "ｨ", "ィ", "ｩ", "ゥ", "ｪ", "ェ", "ｫ", "ォ",

	"ｬ", "ャ", "ｭ", "ュ", "ｮ", "ョ",
)

var hiraganaReplacer = strings.NewReplacer(
	"ア", "あ", "イ", "い", "ウ", "う", "エ", "え", "オ", "お",
	"カ", "か", "キ", "き", "ク", "く", "ケ", "け", "コ", "こ",
	"サ", "さ", "シ", "し", "ス", "す", "セ", "せ", "ソ", "そ",
	"タ", "た", "チ", "ち", "ツ", "つ", "テ", "て", "ト", "と",
	"ナ", "な", "ニ", "に", "ヌ", "ぬ", "ネ", "ね", "ノ", "の",
	"ハ", "は", "ヒ", "ひ", "フ", "ふ", "ヘ", "へ", "ホ", "ほ",
	"マ", "ま", "ミ", "み", "ム", "む", "メ", "め", "モ", "も",
	"ヤ", "や", "ユ", "ゆ", "ヨ", "よ",
	"ラ", "ら", "リ", "り", "ル", "る", "レ", "れ", "ロ", "ろ",
	"ワ", "わ", "ヲ", "を",
	"ン", "ん",

	"ガ", "が", "ギ", "ぎ", "グ", "ぐ", "ゲ", "げ", "ゴ", "ご",
	"ザ", "ざ", "ジ", "じ", "ズ", "ず", "ゼ", "ぜ", "ゾ", "ぞ",
	"ダ", "だ", "ヂ", "ぢ", "ヅ", "づ", "デ", "で", "ド", "ど",
	"バ", "ば", "ビ", "び", "ブ", "ぶ", "ベ", "べ", "ボ", "ぼ",
	"パ", "ぱ", "ピ", "ぴ", "プ", "ぷ", "ペ", "ぺ", "ポ", "ぽ",

	"ヴ", "ゔ",

	"ァ", "ぁ", "ィ", "ぃ", "ゥ", "ぅ", "ェ", "ぇ", "ォ", "ぉ",

	"ャ", "ゃ", "ュ", "ゅ", "ョ", "ょ",
)

var hebonReplacer = strings.NewReplacer(
	// きゃ → KIYA などの回避で先に
	"きゃ", "KYA", "きゅ", "KYU", "きょ", "LYO",
	"しゃ", "SYA", "しゅ", "SYU", "しょ", "SYO",
	"ちゃ", "CYA", "ちゅ", "CYU", "ちょ", "CYO",
	"にゃ", "NYA", "にゅ", "NYU", "にょ", "NYO",
	"ひゃ", "HYA", "ひゅ", "HYU", "ひょ", "HYO",
	"みゃ", "MYA", "みゅ", "MYU", "みょ", "MYO",
	"りゃ", "RYA", "りゅ", "RYU", "りょ", "RYO",
	"ぎゃ", "GYA", "ぎゅ", "GYU", "ぎょ", "GYO",
	"じゃ", "JA", "じゅ", "JU", "じょ", "JO",
	"びゃ", "BYA", "びゅ", "BYU", "びょ", "BYO",
	"ぴゃ", "PYA", "ぴゅ", "PYU", "ぴょ", "PYO",

	"あ", "A", "い", "I", "う", "U", "え", "E", "お", "O",
	"か", "KA", "き", "KI", "く", "KU", "け", "KE", "こ", "KO",
	"さ", "SA", "し", "SHI", "す", "SU", "せ", "SE", "そ", "SO",
	"た", "TA", "ち", "CHI", "つ", "TSU", "て", "TE", "と", "TO",
	"な", "NA", "に", "NI", "ぬ", "NU", "ね", "NE", "の", "NO",
	"は", "HA", "ひ", "HI", "ふ", "FU", "へ", "HE", "ほ", "HO",
	"ま", "MA", "み", "MI", "む", "MU", "め", "ME", "も", "MO",
	"や", "YA", "ゆ", "YU", "よ", "YO",
	"ら", "RA", "り", "RI", "る", "RU", "れ", "RE", "ろ", "RO",
	"わ", "WA", "を", "WO",
	"ん", "N",

	"が", "GA", "ぎ", "GI", "ぐ", "GU", "げ", "GE", "ご", "GO",
	"ざ", "ZA", "じ", "JI", "ず", "ZU", "ぜ", "ZE", "ぞ", "ZO",
	"だ", "DA", "ぢ", "JI", "づ", "ZU", "で", "DE", "ど", "DO",
	"ば", "BA", "び", "BI", "ぶ", "BU", "べ", "BE", "ぼ", "BO",
	"ぱ", "PA", "ぴ", "PI", "ぷ", "PU", "ぺ", "PE", "ぽ", "PO",

	"ゔぁ", "BA", "ゔぃ", "BI", "ゔ", "BU", "ゔぇ", "BE", "ゔぉ", "BO",

	"ぁ", "A", "ぃ", "I", "ぅ", "U", "ぇ", "E", "ぉ", "O",

	"ゃ", "YA", "ゅ", "YU", "ょ", "YO",
)

var morseReplacer = strings.NewReplacer(
	"A", "・－ ",
	"B", "－・・・ ",
	"C", "－・－・ ",
	"D", "－・・ ",
	"E", "・ ",
	"F", "・・－・ ",
	"G", "－－・ ",
	"H", "・・・・ ",
	"I", "・・ ",
	"J", "・－－－ ",
	"K", "－・－ ",
	"L", "・－・・ ",
	"M", "－－ ",
	"N", "－・ ",
	"O", "－－－ ",
	"P", "・－－・ ",
	"Q", "－－・－ ",
	"R", "・－・ ",
	"S", "・・・ ",
	"T", "－ ",
	"U", "・・－ ",
	"V", "・・・－ ",
	"W", "・－－ ",
	"X", "－・・－ ",
	"Y", "－・－－ ",
	"Z", "－－・・ ",

	"1", "・－－－－ ",
	"2", "・・－－－ ",
	"3", "・・・－－ ",
	"4", "・・・・－ ",
	"5", "・・・・・ ",
	"6", "－・・・・ ",
	"7", "－－・・・ ",
	"8", "－－－・・ ",
	"9", "－－－－・ ",
	"0", "－－－－－ ",
	"１", "・－－－－ ",
	"２", "・・－－－ ",
	"３", "・・・－－ ",
	"４", "・・・・－ ",
	"５", "・・・・・ ",
	"６", "－・・・・ ",
	"７", "－－・・・ ",
	"８", "－－－・・ ",
	"９", "－－－－・ ",
	"０", "－－－－－ ",

	".", "・－・－・－ ",
	",", "－－・・－－ ",
	":", "－－－・・・ ",
	"?", "・・－－・・ ",
	"_", "・・－－・－ ",
	"+", "・－・－・ ",
	"-", "－・・・・－ ",
	"^", "・・・・・・ ",
	"/", "－・・－・ ",
	"@", "・－－・－・ ",
	"(", "－・－－・ ",
	")", "－・－－・－ ",
	"\"", "・－・・－・ ",
	"'", "・－－－－・ ",
	"。", "・－・－・－ ",
	"、", "－－・・－－ ",
	"：", "－－－・・・ ",
	"？", "・・－－・・ ",
	"＿", "・・－－・－ ",
	"＋", "・－・－・ ",
	"ー", "－・・・・－ ",
	"＾", "・・・・・・ ",
	"ｰ", "－・・・・－ ",
	"／", "－・・－・ ",
	"＠", "・－－・－・ ",
	"（", "－・－－・ ",
	"）", "－・－－・－ ",
	"”", "・－・・－・ ",
	"’", "・－－－－・ ",
)

var eraseMorse = strings.NewReplacer(
	"・", "",
	"－", "",
	" ", "",
)

// ToZenkaku 半角カナ → 全角カナ （テスト用）
func ToZenkaku(str string) string {
	return zenkakuReplacer.Replace(str)
}

// ToMorse string to morse code
func ToMorse(str string) (string, error) {
	result := zenkakuReplacer.Replace(str)
	result = hiraganaReplacer.Replace(result)
	result = hebonReplacer.Replace(result)
	result = strings.ToUpper(result)
	result = morseReplacer.Replace(result)
	result = strings.TrimRight(result, " ")
	if !checkMorse(result) {
		return "", fmt.Errorf("gorse: not morse code. str=%s, replaced=%s", str, result)
	}
	return result, nil
}

func checkMorse(str string) bool {
	return "" == eraseMorse.Replace(str)
}
